pipeline {
    agent any

    stages {
        stage('Build app') {
            steps {
                sh 'npm i'
                sh 'npm run build'
                archiveArtifacts artifacts: 'build/**, package.json, package-lock.json', fingerprint: true
            }
        }
        stage('Build and publish docker image') {
            steps {
                script {
                    echo "Building docker image"
                    def image = docker.build("abtesting:${env.BUILD_ID}", '-f ./.build/Dockerfile .')

                    echo "Publishing image to registry"
                    docker.withRegistry("https://${params.DOCKER_REGISTRY}", "${params.DOCKER_REGISTRY_CREDENTIALS}") {
                        image.push()
                        image.push('latest')
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }

            steps {
                script {
                    def serviceName = "abtesting"
                    def image = "${params.DOCKER_REGISTRY}/abtesting:${env.BUILD_ID}"
                    def remote = [:]
                    remote.name = params.DOCKER_SERVICE_HOST
                    remote.host = params.DOCKER_SERVICE_HOST

                    withCredentials([
                        sshUserPrivateKey(credentialsId: params.DOCKER_SERVICE_CREDENTIALS, keyFileVariable: 'identity', passphraseVariable: 'passphrase', usernameVariable: 'username'),
                        file(credentialsId: params.DOCKER_SERVICE_HOSTKEY, variable: 'knownHosts'),
                        usernamePassword(credentialsId: params.DOCKER_REGISTRY_CREDENTIALS, usernameVariable: 'dockerUsername', passwordVariable: 'dockerPassword')
                    ]) {
                        remote.user = username
                        remote.identityFile = identity
                        remote.knownHosts = knownHosts
                        
                        sshCommand remote: remote, command: """
                            docker login --username ${dockerUsername} --password ${dockerPassword} ${params.DOCKER_REGISTRY}

                            docker service create \\
                                --name ${serviceName} \\
                                --with-registry-auth \\
                                --replicas 3 \\
                                --publish published=80,target=3000 \\
                                -e PORT=3000 \\
                                ${image}

                            if [[ \$? != 0 ]]; then
                                docker service update \\
                                    --with-registry-auth \\
                                    --image ${image} \\
                                    ${serviceName}
                            fi

                            docker logout ${params.DOCKER_REGISTRY}
                        """
                    }
                }
            }
        }
    }
}

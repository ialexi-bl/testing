void buildImage(imageName, dockerFile) {
    script {
        def image = docker.build(imageName, "-f ${dockerFile} .")
        docker.withRegistry("https://${params.DOCKER_REGISTRY}", "${params.DOCKER_REGISTRY_CREDENTIALS}") {
            image.push()
            image.push('latest')
        }
        sh "docker rmi ${imageName}"
    }
}

pipeline {
    agent any

    stages {
        stage('Build and publish docker image') {
            parallel {
                stage ('Application') {
                    steps {
                        sh 'npm i'
                        sh 'npm run build'
                        archiveArtifacts artifacts: 'build/**, package.json, package-lock.json', fingerprint: true
                        buildImage("abtesting:${env.BUILD_ID}", "./.build/Dockerfile.ssr")
                    }
                }
                stage ('Nginx') {
                    steps {
                        script {
                            buildImage("abtesting-proxy:${env.BUILD_ID}", "./.build/Dockerfile.nginx")
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }

            environment {
                DOCKER_SERVICE_CREDS = credentials("${params.DOCKER_REGISTRY_CREDENTIALS}")
                ABTESTING_PROXY_IMAGE = "${params.DOCKER_REGISTRY}/abtesting-proxy:${env.BUILD_ID}"
                ABTESTING_IMAGE = "${params.DOCKER_REGISTRY}/abtesting:${env.BUILD_ID}"
            }

            steps {
                script {
                    def serviceName = "abtesting"
                    def remote = [:]
                    remote.name = params.DOCKER_SERVICE_HOST
                    remote.host = params.DOCKER_SERVICE_HOST

                    withCredentials([
                        sshUserPrivateKey(credentialsId: params.DOCKER_SERVICE_CREDENTIALS, keyFileVariable: 'identity', passphraseVariable: 'passphrase', usernameVariable: 'username'),
                        file(credentialsId: params.DOCKER_SERVICE_HOSTKEY, variable: 'knownHosts')
                    ]) {
                        remote.user = username
                        remote.identityFile = identity
                        remote.knownHosts = knownHosts
                        
                        sshPut remote: remote, from: './.build/docker-compose.yml', into: '.'
                        sshCommand remote: remote, command: """
                            docker login --username \$DOCKER_SERVICE_CREDS_USR --password \$DOCKER_SERVICE_CREDS_PSW ${params.DOCKER_REGISTRY}

                            export ABTESTING_PROXY_IMAGE=${env.ABTESTING_PROXY_IMAGE}
                            export ABTESTING_IMAGE=${env.ABTESTING_IMAGE}
                            docker stack deploy \\
                                --compose-file ./docker-compose.yml \\
                                --with-registry-auth \\
                                abtesting

                            docker logout ${params.DOCKER_REGISTRY}
                        """
                        sshRemove remote: remote, path: './docker-compose.yml'
                    }
                }
            }
        }
    }
}
